@startuml inline_umlgraph_1.png
package OSWrapper {
  abstract class Thread {
    {static} create(Runnable*) : Thread*
    {static} destroy(Thread*)
    {abstract} start()
  }
  interface ThreadFactory {
    {abstract} create(Runnable*) : Thread*
    {abstract} destroy(Thread*)
  }
  interface Runnable {
    {abstract} run()
  }
}

package ItronOSWrapper {
  class ItronThread {
    kernel object ID
    start()
  }
  class ItronThreadFactory {
    create(Runnable*) : Thread*
    destroy(Thread*)
  }
}

class UserTask << active >> {
  run()
}

Thread <|-- ItronThread
ThreadFactory <|. ItronThreadFactory
Thread -> ThreadFactory
ItronThreadFactory ..> ItronThread : <<instantiate>>
Thread --> Runnable
Runnable <|.. UserTask
Client --> Thread
Client ..> UserTask
note right of Client : This depends on OSWrapper, but does\n not depend on ItronOSWrapper.
note "This item belongs to \n the most abstract layer." as N1
N1 .. OSWrapper
note "This is an example of RTOS.\n This item belongs to the most concrete layer \n that includes the code depended on the real RTOS." as N2
N2 .. ItronOSWrapper
note "MutexFactory, EventFlagFactory, etc \n are also the same structure as ThreadFactory." as N3
@enduml
@startuml inline_umlgraph_3.png
title Thread State Transition

[*] -right-> FINISHED : create
FINISHED -right-> READY : start
READY --> RUNNING : dispatch
RUNNING --> READY : preempted
RUNNING -right-> WAITING : wait
WAITING --> READY : release from waiting
RUNNING --> FINISHED : finish
FINISHED --> [*] : destroy
@enduml
